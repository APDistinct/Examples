Адрес  https://rvprj.ru/FLChat
        https://rvprj.ru:8443/FLChat
       http://5.188.115.71:8082/FLChat/ - не использовать

Изменения:
2019.06.05
1. Ранк в информации пользователя перенесён в короткую версию 
2. Список контактов возвращает всех пользователей

2019.06.22
1. Статус онлайн пользователя в коротком профиле
2. Сообщения в веб-чат с приглашениями пользователя
3. Добавлено событие DeepLinkAccepted
4. Создание юзера POST users

2019.07.02
1. message/history:
    а. В ответе, если список сообщений пуст, то поле last_id содержит значение поля message_id из запроса
    б. В запросе и ответе добавлено поле order
    в. Исправлено: в истории возвращаются только внутренние сообщения (FLChat и WebChat), раньше возвращались все сообщения
2. POST message: 
    а. В ответ на отправку персонального сообщения  возвращается тип транспорта, на который сообщение было отправлено
    б. Исправлено значение в полях to_transport в ответе на широковещательное сообщение
3. Короткий профиль пользователя в GET profile/contacts, GET */childs, GET structure
    а. Добавлено поле last_message в короткий профиль пользователя
    б. добавлено unread_count - количество непрочитанных сообщений
4. Запрос GET profile/contacts возвращает список пользователей, с которыми было общение. +Переименование поля в ответе
5. GET users/<id>: добавлен комментарий в профиле пользователя

2019.07.25
1. Сохранение кода из последней СМС как пароля и возможность войти по номеру телефона/паролю
2. Порционный запрос данных для profile/childs, users/id/childs, profile/contacts, structure
3. Технический запрос для редактировая транспорта пользователя

2019.07.29
Расширена информация о пользователе

2019.08.26
1. Запрос поиска консультантов в своей структуре 3.9 GET users?search=xyz
2. Добавлено поле количество пользователей в структуре в запрос */childs

2019.09.04
1. В ответе на запрос */childs добавлено поле "has_childs"
2. Добавлен запрос 3.10 POST users/selection - подсчёт количества выделенных пользователей
3. Добавлена возможность отправки широковещательных сообщений в выделение. 

2019.09.13
1. Добавлена команда POST message/limit для получения информации о лимитах на отправку. Лимиты считаются только в случае отправки в древовидную структуру пользователя, пока не считаются для отправки в сегменты. Также пока не реализован запрет отправки сообщения при превышении лимитов. Будет в будущих версиях.
2. В короткий профиль пользователя добалена информация о тэгах пользователя. Вхождение в сегмент 23% директоров отмечается тэгом P23
3. Доработки по файлам
4. Админские команды. В данный момент работают от имени всех пользователей. В будущих версиях будет добавлено ограничение на роль пользователя.
    4.1 Поиск по всем пользователям(включая удалённых)
    4.2 Получения списка пользователей в сегменте по всей базе с возможностью поиска, пагинации
    4.3 Администрирование сегмента - добавление и удаление пользователей
    4.4 Удаление транспорта пользователя

2019.09.19
1. GET /FLChat/admin/segment - список всех сегментов в БД (включая удалённые)
2. GET /FLChat/admin/user/<id>/segments - список всех сегментов пользователя

2019.09.24
1. Изменён формат вызова запроса для широковещательных сообщений. Поля "to_users" и "to_segments" считаются устаревшими. Вместо них надо использовать поле "selection" типа Selection, в которое добавлено поле "segments" - список выделенных сегментов и поле "include" - список выделенных пользователей. Лимиты на отправку широковещательных сообщений работают только с полем "selection". 
2. При отправке широковещательного сообщения можно в ответ получить статус 403 Forbidden с ошибкой exceed_limit. В этом случае сообщение не было отправлено и в ответе также содержится поле , также имеется поле limit с данными, аналогичными ответу на message/limit.
3. В короткий профиль пользователя добавлены поля:
    "broadcast_prohibition": false | true, //для пользователя запрещена массовая рассылка в его структуру
    "broadcast_prohibition_structure": false | true,  //входит в структуру пользователя, для которого запрещена массовая рассылка.
поле "broadcast_prohibition" также добавлено в полный профиль пользователя. Задавать значение поля можно запросом для редактирования информации о пользователе: POST users/<id> - изменение профиля пользователя. Поле учитывается при расчёте лимитов и количестве пользователей в выделении.

2019.09.26
1. В полный профиль пользователя добавлено поле has_childs
   
2019.10.01
Заполнение поля HasChilds в коротком профиле пользователя при выполнении запросов: contacts, search, structure
   
При выполнении любого запроса в ответ мы можем получить:
200 OK - значит запрос выполнился успешно и в этом случае в данных будет Json с указанной в каждом запросе структурой.
40* .. - Отказ в выполнении запроса и в ответе будет Json вида
{
    "error": "invalid_auth_token",
    "error_descr": "Authorization failed, token is invalid or expired",
    "error_trace": ....
}
все поля типа строка.
поля error_descr и error_trace могут отсутствовать или быть null
В описании ошибка такого вида указывается: 401 Unauthorized + <значение поля error>.

2019.10.09
Подстановка значений для каждого персонального сообщения для стандартных переменных в тесте сообщения. В данный момент обрабатываются две переменные - #ФИО" и "#город". В случае отсутствия данных заменяется на пустую строку.

2019.10.20
Обработка запроса перехода по ссылке от ВК. 

2019.12...
1. Добавлены методы получения статистики отправленных сообщений message/sent и message/sent/<id>
2. В полный профиль добавлены поля IsMe, ParentDepth, ChildDepth
3. Добавлен запрос на смену пароля POST profile/password

2020.01.31
1. Добавлено поле "время отложенного старта" в команду отправки сообщений.

2020.02.14
Команда редактирования "отложенных" сообщений. Изменение времени и статуса.

2020.02.20
1. Команда передачи файла с номерами телефонов для формирования "кастомного списка" пользователя.
2. Рассылка сообщений в "кастомный список" пользователя


2020.08.15
1. Для рассылки в "кастомный список" сделана правильная обработка номеров телефонов.
2. Добавлен метод чтения конфигурации(FLCHAT-330). GET auth/config


2020.08.18
1. Добавлена возможность изменения звания пользователя (FLCHAT-329).
2. Команда получения списка званий. GET  admin/rank


1. Авторизация
2. Сообщения 
  2.1 POST message - отправка сообщения
  2.2 POST message/read - установка флага,что сообщение прочитано
  2.3 POST events - получение списка событий
  2.4 POST message/history - получение истории сообщений
  2.5 POST message/limit - информация о лимитах на отправку
  2.6 GET message/sent - информация об отправленных сообщениях
  2.7 GET message/sent/<message id> - информация об отправленном сообщении
  2.8 POST message/<message id> - изменение времени и статуса отложеного сообщения
3. Работа с профилями
  3.1 GET users/<id> - получение профиля пользователя
      GET profile - получение своего профиля      
  3.2 GET users/<id>/avatar
      POST users/<id>/avatar
      DELETE users/<id>/avatar
      GET profile/avatar
      POST profile/avatar
      DELETE profile/avatar
  3.3 GET profile/contacts 
  3.4. Получение прямых подчинённых
      GET profile/childs
      GET users/08c67188-b2e2-41c3-9b9e-058359648e05/childs
  3.5 GET profile/childs/count
      GET users/<user_id>/childs/count
  3.6 POST users/<id> - изменение профиля пользователя
      POST profile - изменение своего профиля 
  3.7 POST users - добавление пользователя в своём прямом подчинении
  3.8 GET profile/parents - получение всех вышестоящих в структуре
  3.9 GET|POST user/<id>/transport - тестовый запрос для редактировая транспорта пользователя
  3.10 GET users?search=... - поиск пользователей в своей структуре
  3.11 POST users/selection - подсчёт количества выделенных пользователей
  3.12 POST profile/password - смена пароля
  3.13 POST profile/phonelist - загрузка файла с номерами телефонов, формирования "кастомного списка" пользователя.
  
4. Сегменты
    4.1 GET segment - список сегментов
        POST segment - список сегментов
    4.2 GET segment/<id>
    4.3 (адм) POST segment/<id> - добавление/удаление пользователей в/из сегмента

5. Структура
    5.1 GET structure
    5.2 GET structure/"id"    

6. WebChat    
    6.1 GET webchat/<code> - получение сообщения по коду
    6.2 POST webchat/<code> - ответ на сообщение по коду

7. Файлы
    7.1. Отправка файла. 
    7.2. Получение файла. 

8. Администрирование
    8.1 GET  admin/users?search=xyz&count=X&offset=Y  - поиск пользователей по всей БД
    8.2 GET  admin/segment/<id>?search=xyz&count=X&offset=Y Получения списка пользователей в сегменте по всей базе с возможностью поиска, пагинации
    8.3 POST admin/segment/<id> Администрирование сегмента - добавление и удаление пользователей
    8.4 DELETE /admin/user/<id>?transport=xxx  Удаление у заданного пользователя транспорт заданного типа
    8.5 GET /admin/segment - список всех сегментов в БД (включая удалённые)
    8.6 GET /admin/user/<id>/segments - список всех сегментов пользователя
    8.7 GET /admin/messagetype Информации по ограничениям на рассылку
    8.8 POST /admin/messagetype/<type> Установка ограничений на рассылку
    8.9 GET  admin/rank  получение списка званий



1.1. Отправка СМС по номеру телефона для аутентификации.
POST auth/login
request data:
{
  "phone": '668564447' //обязательное поле, строка
}
response: 
200 OK
{
    "status": "Sent", //возможные значения: Sent - смс отправлено, Waiting - прошлая смс была отправлена не так давно
    "waiting_time": null //заполняется при статусе Waiting с указанием количества секунд до возможно последующей отправки смс
}
401 Unauthorized + user_not_found - пользователь не найден


1.2. Ввод кода из СМС для получения токена
POST auth/token
request:
{
  "phone": '668564447',  //номер телефона, обязательное поле, строка
  "sms_code": '306588'   //код из смс или пароль, обязательное поле, строка
}
responce:
200 OK
{
    "token": "....."
}
400 HttpStatusCode.BadRequest + input_data_error - ошибка во входящих данных
400 HttpStatusCode.BadRequest + not_found - не найден пользователь или смс код
400 HttpStatusCode.BadRequest + expired - срок действия СМС кода истёк

1.3. Обновление токена
POST auth/token
request:
{
  "token": '......',  //старый токен, обязательное поле, строка  
}
responce:
200 OK
{
    "token": "....."
}
401 Unauthorized + invalid_auth_token - неверный токен
401 Unauthorized + missed_auth_token - токен не найден
401 Unauthorized + user_not_found - пользователь не найден
401 Unauthorized + expired - период, за который можно обновить токен, истёк

Во всех дальнейших методах в заголовке запроса в поле Authorization должен быть токен

1.4. Выход (дизактивирование токена)
GET auth/logout
200 OK

1.5. Получение конфигурации фронта. Без авторизации.
GET auth/config
response: 
200 OK
{
    "config": "..." // текст конфигурационного файла

}

Возможен вариант значения строки null, если конфигурационный файл в базу не записан.


2.  POST message - отправка сообщения
    POST message/read - установка флага,что сообщение прочитано
    POST events - получение списка событий
    POST message/history - получение истории сообщений
2.6 GET message/sent - информация об отправленных сообщениях
    GET message/sent?count=X&offset=Y - с количеством и смещением
    GET message/sent?offset=Y - со смещением
    GET message/sent?start_from=<message id> - начать выдачу с сообщения после указанного
2.7 GET message/sent/<message id> - информация об отправленном сообщении
    
TransportKind - Типы транспорта (перечисление): 
    'FLChat' - внутренний вид транспорта, для общение необходимо авторизироваться
    'Telegram' - телеграм
    'WebChat' - внутренний вид транспорта, общение без авторизации и используется для приглашения пользователей из других мессенджеров. При отправке сообщения в WebChat пользователю будет отправлено СМС (если возможно) со ссылкой для чтения сообщения. Этот тип транспорта не вовзращается в профиле пользователя, но незримо присутствует у всех. Если у пользователя нет никакого другого типа транспорта, то все сообщения будут уходить на этот тип.
    'Sms' - отправка СМС. Не возвращается в профиле пользователя, но незримо присутствует, если у пользователя есть телефон.
    
MessageStatus - статус сообщения (перечисление):
    transport_not_found - не найден транспорт или адресат
    cancelled - отменено
    failed - сбой при отправке
    deleted - удалено
    quequed - в очереди
    sent - отправлено
    delivered - доставлено
    read - прочитано.       
    
2.1. POST message
request:
{
  "type": 'personal', //тип сообщения, возможные значения 'Personal', 'Broadcast', 'Mailing'
  "to_user": '359F8CF1-7D3E-45AF-AAA6-E3C4A936A7EB', //идентификатор адресата
  "to_transport": 'FLChat', //вид транспорта, тип TransportKind (пока только FLChat), если пусто, то будет использоваться по умолчанию или если не задан, то FLChat
  "text": 'Hello word!', //текст сообщения
  "file": {         //данные об отправяемом файле, может быть null. Заполняется или поле file или поле file_id
    "type" : "Image" , //тип файла image | office
    "file_name" : "test.jpg",
    "mime_type": "image/jpeg", //опционально
    "data" :   "iVBORw0KGgo=", //содержимое файла в кодировке base64
  },
  "file_id": "97f0a7ea-54a1-e911-b60a-74d4352752da" //отправяемый файл, может быть null. Заполняется или поле file или поле file_id
  "delayed_start" : "2020-04-12T12:53Z",  //  время отправки сообщения, может быть null
}

responce:
200 OK и данные:
{
    "message_id": "e71b8e2d-e34e-e911-82e7-1c1b0dafbcae", //идентификатор сообщения
    "status": "sent", //статус сообщения. Тип MessageStatus (поле будет удалено)
    "user": {
            "user_id": "1b2c6f49-f37a-e911-b5d9-74d4352752da", //адресат из запроса
            "to_transport": "FLChat", //тип транспорта TransportKind
            "status": "sent" //статус сообщение, тип MessageStatus
        },
    "file_id": "97f0a7ea-54a1-e911-b60a-74d4352752da" //идентификатор загруженного файла, может быть null
}

Для отправки сообщений на FLChat в ответ может быть только transport_not_found или sent

400 BadRequest + not_support - не поддерживается (например сейчас не поддерживаются групповые сообщения)
400 BadRequest + input_data_error - что-то не так в переданных данных
400 BadRequest + not_support - при попытке послать сообщение самому себе

Время отправки отложенного сообщения задаётся в формате ISO 8601 date format (e.g. "2020-04-12T12:53Z")


Отправка сообщения множеству пользователей:

request:
{
  "type": 'Broadcast', //тип сообщения, возможные значения 'Personal', 'Broadcast', 'Mailing'.
  "to_users":  //идентификатор адресата, устаревшее и будет удалено. Использовать поле selection
   [ 
    {"user_id": '2C40DE5D-0E43-423A-BAAC-07AA3EF1C0EC', "transport": 'FLChat'},
    {"user_id": '1b2c6f49-f37a-e911-b5d9-74d4352752da', "transport": 'FLChat'},
    {"user_id": 'F5046316-6372-E911-B5CD-74D4352752DA'}
   ],
  "to_segments":    //устаревшее и будет удалено. Использовать поле selection
   [
    'seg-350ba6f3-4a7d-4d33-8021-16bd89bb6c46', //идентификатор адресата
   ],
  "selection": { }, //тип данных Selection (описание см ниже). Передаётся либо поле selection, либо поля to_users и to_segments
  "text": 'Hello word!', //текст сообщения
  "file": {         //данные об отправяемом файле, может быть null. Заполняется или поле file или поле file_id
    "type" : "Image" , //тип файла Image | Document
    "file_name" : "test.jpg",
    "mime_type": "image/jpeg", //опционально
    "data" :   "iVBORw0KGgo=", //содержимое файла в кодировке base64
  },
  "file_id": "97f0a7ea-54a1-e911-b60a-74d4352752da" //отправяемый файл, может быть null. Заполняется или поле file или поле file_id
  "delayed_start" : "2020-04-12T12:53Z",  //  время отправки сообщения
  "to_phone_list" : true | false,  // Признак отправки в кастомный список. Может быть NULL.
}

"to_transport" может отсутствовать или быть null, в этом случае будет взят транспорт по умолчанию.
Отправка производится всем пользователям из списка и всем пользователям из сегментов без повторов.
В ответе перечень всех пользователей, которым пытались отправить сообщение с результатами отправки.

В результате выполнения команды отправки сообщения с параметром "to_phone_list", значение которого установлено в true, в качестве списка для рассылки будет взят сформированный командой 3.13 список и по нему осуществится рассылка. Все остальные списки, передаваемые в команду, игнорируются. Если же параметр отсутствует или значение его равно false, то отправка осуществляется по ранее работавшим алгоритмам. Рассылка работает только для НЕ персонального сообщения.

Информация о выделенных пользователях в структуре
Тип Selection {
	"include_with_structure": //массив пользователей, выделенных вместе со своей структурой. Выделение может быть глубоким (deep), т.е. на всю глубину структуры, либо мелким (shallow), только один уровень вниз.
        [
            { "user_id": 'b7f43f8c-d71d-4fae-b791-0053cef5f0b9', "type": 'shallow' | 'deep' },
            ...
        ], 
    "exclude_with_structure": [ "c7f43f8c-d71d-4fae-b791-0053cef5f0b9", ....], //список пользователей, исключённых из выделения вместе со своей структурой
    "include": [ "d7f43f8c-d71d-4fae-b791-0053cef5f0b9", ....], //поимённый список пользователей, включённых в выделение
    "exclude": [ "e7f43f8c-d71d-4fae-b791-0053cef5f0b9", ....], //поимённый список пользователей, исключённых из выделения
    "segments": [ "guid", "seg-guid" ], //список идентификаторов сегментов (guid или guid с префиксом seg-, который возвращается в структуре пользователя)
}
Алгоритм подбора пользователей с типом Selection:
1. Добавляются все пользователи со своей структурой из списка include_with_structure.
2. Добавляются все пользователи из сегментов
3. Из добавленных пользователей исключаются пользователи со своей структурой из списка exclude_with_structure.
4. Исключаются пользователи из списка exclude.
5. Добавляются пользователи из списка include.
6. Исключаются пользователи, входящие в подструктуру пользователей, для которых запрещена массовая рассылка ("broadcast_prohibition").


responce:
200 OK и данные:
{
    "users": [
        {
            "user_id": "2c40de5d-0e43-423a-baac-07aa3ef1c0ec",
            "to_transport": "FLChat", //тип транспорта TransportKind,
            "status": "sent"
        },
        {
            "user_id": "1b2c6f49-f37a-e911-b5d9-74d4352752da",
            "to_transport": "FLChat", //тип транспорта TransportKind,
            "status": "sent"
        },
        {
            "user_id": "f5046316-6372-e911-b5cd-74d4352752da",
            "to_transport": null,
            "status": "transport_not_found"
        }
    ],
    "message_id": "cbc2435f-147d-e911-b5dc-74d4352752da"
}

Ошибки
400 BadRequest + input_data_error - в случае заполненных полей file_id и file одновременно
400 BadRequest + input_data_error - в случае, если по переданному file_id не найден файл в БД
415 UnsupportedMediaType + not_support  заявленный тип файла(в широком смысле) не совпадает с его реальным типом(по сигнатуре)
403 Forbidden + exceed_limit, также имеется поле limit с данными, аналогичными ответу на message/limit


Рассылка Email-сообщений. Тип сообщения - "type": 'Mailing'

По своей структуре посылка аналогична типу 'Broadcast', отличается только обработка запроса. 
В частности, всем посылаемым сообщениям тип транспорта будет установлен Email, будет сделана проверка на наличие у пользователей почтового адреса. Отправка будет произведена только тем, у кого есть адрес Email и он активен. Всем остальным отправки не будет, об этом будет сообщено в ответе.

Ответ такой же, как в 'Broadcast' - списки тех, кому отправлено и тех, кому НЕ отправлено. Однако следует иметь в виду, что отправка и доставка - вещи разные. Может быть неправильно указан адрес и т.п.

2.2 POST message/read
request:
{
  "messages": [
      '4e016a6d-e54e-e911-82e7-1c1b0dafbcae', 
      'E71B8E2D-E34E-E911-82E7-1C1B0DAFBCAE'
      ]
}
Список сообщений, которые прочитаны
В ответ 200 OK

2.3 Получение новых событий
POST events
request:
{
   "last_event_id": 600, //идентификатор последнего возвращённого события, события в ответе будут больше этого числа
   "count": 500  //количество событий
}
response: 200 OK
{
    "events": [  //массив событий
        {
            "id": 100,  //идентификатор
            "kind": "MessageIncome",  //тип события
            "caused_by_user": <Guid>, //пользователь, который вызвал это событие
            "caused_by_transport": <транспорт, перечисление. может быть null> //транспорт пользователя
            ....
        },
        .....
    ],
    "last_id": 873, //идентификатор последнего возвращённого события в массиве  events
    "max_count": 500 //максимальное допустимое количество событий в ответе
}
Элементы в массиве представлены типом Event с полями:
    id () - идентификатор, 64 бит целое, обязательное поле.
    kind - тип события, EventKind, обязательное поле.
    caused_by_user - идентификатор пользователя, который вызвал это событие. Не может быть NULL, обязательное поле.    
    caused_by_transport - транспорт пользователя, вызвавшего событие. Может быть NULL если событие не имеет отношения к транспорту
    msg - сообщение, тип Message. Присутствует, если kind = MessageIncome
    msg_status () - смена статуса отправленного сообщения, тип MessageStatus. Присутствует, если тип события kind = MessageSent, MessageDelivered, MessageRead, MessageFailed

перечисдение EventKind может принимать значения:
    Test - игнорировать,
    MessageSent - сообщение было отправлено
    MessageDelivered - сообщение было доставлено
    MessageRead - сообщение было прочитано
    MessageDeleted - сообщение было удалено
    MessageFailed - сбой при отправке
    MessageIncome - входящее сообщение

    DeepLinkAccepted - пользователь принял приглашение по внешней ссылке. В поле caused_by_transport указан новый транспорт пользователя. 

Тип File:
{
    "file_id": "d939f6f7-22c4-e911-82f4-1c1b0dafbcae",
    "length":4934,
    "width":362,
    "height":412,
    "type": "image",
    "mime_type": "image/jpeg",
    "file_name": "test.jpg"
}
Поля width и height рассчитываются только для изображений, для других файлов их значения null.
    
Тип Message:
    id - идентификатор типа Guid
    tm - Время отправки
    from - отправитель, Guid
    transport - транспорт TransportKind отправителя, перечисление
    incoming - входящее или нет, логическое
    text - текст сообщения
    file - информация о файле, тип File, может быть null
    is_read: false //прочитано или нет, только для входящих

Тип MessageStatus:
    id - идентификатор типа Guid
    user_id - адресат сообщения
    transport - транспорт адресата сообщения

2.4 Получение истории сообщений
POST message/history
{
	"user_id": ..., //идентификатор пользователя, история общения с которым запаршивается
	"message_id": ..., //идентификатор сообщения, с которого начать выборку не включая его самого. Может быть пустой, тогда будет выборка в прошлое с последнего сообщения включительно
    "count": 1, //макс количество сообщений в ответе. Может быть пустым. Положительное число значит выборка в будущее, отрицательное - в прошлое. Направление выборки учитывается только при заданном message_id
    "order": "asc" | "desc" | null, //сортировка сообщений в ответе. Если null или отсутствует, то сортировка задаётся направлением выборки
}
response: 200 OK
{
    "user_id": ..., //идентификатор пользователя из запроса
    "forward": true,  // направление выдачи
    "max_count": 100, // максимально разрешённое количество сообщений
    "last_id": "b9b19eb0-904f-e911-82e7-1c1b0dafbcae", //идентификатор последнего сообщения в списке с учётом направления выдачи. Если список пустой, то содержит идентификатор message_id из запроса. 
    "order": "asc" | "desc", //сортировка сообщений в ответе.
    "messages": [ //список сообщений. Сортировка зависит от направления выдачи
        {
            "to_user": ...,  //адресат, Guid, только для исходящих
            "to_transport": "FLChat",   //транспорт адресата, только для исходящих
            "status": "read", //статус сообщения, см перечисление MessageStatus, только для исходящих
            "tm": "2019-03-26T06:30:49.583", //время отправки в UTC
            "kind": "Personal",  //тип сообщения
            "from": ..., //отправитель, Guid
            "transport": "FLChat",  //транспорт отправителя
            "incoming": false,  //входящее или исходящее
            "text": "Test message ReadMessageNotify_ManyMsg one", //текст
            "id": ....,  //идентификатор, Guid
            "is_read": false, //прочитано или нет, только для входящих
            "file": { //информация о файле, тип File, может быть null
                "file_id": "d939f6f7-22c4-e911-82f4-1c1b0dafbcae",
                "length": 4653,
                "type": "image",
                "mime_type": "image/jpeg",
                "file_name": "test.jpg"
            }, 
        },
    ]
}

2.5 POST message/limit - информация о лимитах на отправку
{
  "type": 'Broadcast', //тип сообщения, возможные значения 'Broadcast', 'Mailing'
  "selection": { }, //тип данных Selection, может быть null    
}
response: 200 OK
{
    "type": "Broadcast",    //тип сообщения из запроса
    "limit_for_day": 1000,  //ограничение на количество сообщений в день, может быть null
    "limit_for_once": 1000, //ограничение на количество сообщений за раз, может быть null
    "already_sent": 0,      //количество сообщений указанного типа отправленных за сегодня
    "selection_count": 1,   //количество пользователей в выделении, которым будет отправлено сообщение. Это не тоже самое, что количество пользователей в выделении. может быть null если не указано выделение
    "exhausted": false,     //исчерпан лимит за день или нет
    "exceed_day_limit": 0,  //на сколько потенциальная отправка сообщения в указанное выделение превысит лимит за день, может быть null если не указано выделение или нет лимита
    "exceed_once_limit": 0  //на сколько потенциальная отправка сообщения в указанное выделение превысит лимит за раз, может быть null если не указано выделение или нет лимита
}

2.6 GET message/sent - информация об отправленных сообщениях
    GET message/sent?count=X&offset=Y - с количеством и смещением
    GET message/sent?offset=Y - со смещением
    GET message/sent?start_from=<message id> - начать выдачу с сообщения после указанного
Параметр start_from имеет более высокий приоритет, чем offset, т.е. при наличие обоих параметров использоваться будет только start_from.
response: 200 OK
{
    "messages": [ //массив из типов данных MessageSentStats
        <MessageSentStats>,
        <MessageSentStats>
    ...],
    "started_from": <msg_id>, //поле из запроса start_from или null, если не было указано
    //стандартная часть ответов с порционной выдачей данных
    "offset": 0,  //смещение из запроса, имеет смысл, если не было указано значение start_from
    "count": 100, //фактическое количество записей в текущем пакете
    "max_count": 100,  //максимальное количество записей для запроса
    "req_count": 100,  //запрошенное количество
    "total_count": 112  //общее количество записей, передаётся только для запроса со смещением 0

}    
Сообщения в ответе отсортированы по дате (недавно отправленные в начале)
 
тип данных MessageSentStats:
{
    "id": ..., //идентификатор сообщения, обязательный
    "tm": "2019-03-26T06:30:49.583", //время отправки в UTC, обязательный
    "kind": "Broadcast" | "Mailing", //тип сообщения, обязательный
    "text": "...", //текст сообщения
    "file": { }, //информация о файле, тип File, может быть null
    "stats": {  //статистика сообщения
        "recipient_count": 10, //количество получателей
        "web_chat_count": 5, //количество получателей, которым было отправлено в веб-чат
        "failed_count": 0, //количество получателей, при отправке которым произошёл сбой
        "sent_count": 10, //количество отправленных
        "quequed_count": 0, //количество ожидающих отправки
        "cant_send_count": 0, //количество сообщений, которые не могут быть отправлены в ВебЧат (нет телефона)
        "web_chat_accepted_count": 2, //количество получателей, которые привязали аккаунт из сообщения в вебчате
        "sms_url_opened_count": 3, //количество получателей, которые открыли веб-форму с веб-чат сообщением
        "state": "quequed" | "in_progress" | "complete" //состояние рассылки
    }
} 
 
2.7 GET message/sent/<message id> - информация об отправленном сообщении
В ответе тип данных MessageSentStats дополненный полем "recipients" - списком получателей со статистикой
response: 200 OK
{
    "id": ..., //идентификатор сообщения, обязательный
    "tm": "2019-03-26T06:30:49.583", //время отправки в UTC, обязательный
    "kind": "Broadcast" | "Mailing", //тип сообщения, обязательный
    "text": "...", //текст сообщения
    "file": { }, //информация о файле, тип File, может быть null
    "stats": {  //статистика сообщения
        "recipient_count": 10, //количество получателей
        "web_chat_count": 5, //количество получателей, которым было отправлено в веб-чат
        "failed_count": 0, //количество получателей, при отправке которым произошёл сбой
        "sent_count": 10, //количество отправленных
        "quequed_count": 0, //количество ожидающих отправки
        "cant_send_count": 0, //количество сообщений, которые не могут быть отправлены в ВебЧат (нет телефона)
        "web_chat_accepted_count": 2, //количество получателей, которые привязали аккаунт из сообщения в вебчате
        "sms_url_opened_count": 3, //количество получателей, которые открыли веб-форму с веб-чат сообщением
        "state": "quequed" | "in_progress" | "complete" //состояние рассылки
    },
    "recipients": [{
        "user": <guid>, //идентификатор получателя,
        "transport": ... //перечисление TransportKind,
        "is_web_chat": true | false, //сообщение было отправлено в веб-чат,
        "is_failed": true | false, //сбой при отправке,
        "is_sent": true | false, //отправлено,
        "is_quequed": true | false, //в очереди,
        "cant_send": true | false | null, //не может быть отправлено (нет телефона)
        "is_web_chat_accepted": true | false | null, //для веб-чат сообщений - была привязка канала или нет,
        "is_web_form_requested": true | false | null, //для веб-чат сообщений - была открыта веб-форма или нет,
    }, 
    ...]
}

2.8 POST message/<message id> - изменение времени и статуса отложеного сообщения
{
    "cancelled": true | false  // признак отмены "отложенной" отправки 
    "delayed_start" : "2020-04-12T12:53Z",  //  время отправки сообщения

}
В случае отмены "отложенной" отправки сообщение переходит в статус немедленной отправки

response: 200 OK
В случае наличия более одного поля в отправке, последовательность обработки полей во вложении "cancelled", "delayed_start". Если проходит обработка поля, то следующие за ним игнорируются и не обрабатываются.

Ошибки
400 BadRequest + input_data_error - в случае заполненных полей file_id и file одновременно
Причины ошибок
Сообщение на изменение времени/статуса приходит поздно
Попытка изменить время/статус неотложенного сообщения
Попытка изменить время/статус отложенного сообщения, которому уже отменили этот статус - повторная установка в состояние "отложенного" невозможна



3. Работа с профилями
  3.1 GET users/<id> - получение профиля пользователя
      GET profile - получение своего профиля
  3.2 GET users/<id>/avatar
      POST users/<id>/avatar
      DELETE users/<id>/avatar
      GET profile/avatar
      POST profile/avatar
      DELETE profile/avatar
  3.3 GET profile/contacts 
  3.4. Получение прямых подчинённых
      GET profile/childs
      GET users/08c67188-b2e2-41c3-9b9e-058359648e05/childs
  3.5 GET profile/childs/count
      GET users/<user_id>/childs/count
  3.6 POST users/<id> - изменение профиля пользователя
      POST profile - изменение своего профиля 
  3.7 POST users - добавление пользователя в своём прямом подчинении
  3.8 GET profile/parents
  3.9 GET|POST user/<id>/transport - тестовый запрос для редактировая транспорта пользователя
  3.10 GET users?search=xyz - поиск пользователей в своей структуре
  3.11 POST users/selection - подсчёт количества выделенных пользователей
  3.12 POST profile/password - смена пароля  
  3.13 POST profile/phonelist - загрузка файла с номерами телефонов, формирования "кастомного списка" пользователя.
  
Типы данных:
UserInfoShort - Короткая информация о пользователе:
{
    "user_id": "bda8bb6d-3e55-e911-b5a5-74d4352752da",
    "full_name": "created by test",
    "is_consultant": false,
    "avatar_upload_date": null, //UTC дата загрузки аватара в формате ISO 8601, может быть NULL, т.е. нет аватара
    "rank": "...", //ранк пользователя, строка, может быть NULL
    "online": "offline" | "online" | null, //одно из значений, может быть NULL
    "last_message": <Тип Message>, //последнее сообщение в диалоге с этим пользователем,
    "unread_count": 0, //количество непрочитанных входящих сообщений от этого пользователя
    "has_childs": true | false, //есть потомки или нет
    "is_deleted": true,  //  Признак удалённого пользователя(только для удалённых)
    "tags": ["P23"] //массив тэгов пользователя, может быть NULL. Вхождение в сегмент 23% отмечается тэгом P23
    "broadcast_prohibition": false | true, //для пользователя запрещена массовая рассылка в его структуру
    "broadcast_prohibition_structure": false | true,  //входит в структуру пользователя, для которого запрещена массовая рассылка
}

UserInfo - полная информация о пользовате (включает поля из UserInfoShort):
{
    "registration_date": "2002-08-08T00:00:00", //дата регистрации из Партнёра, м.б. null
    "phone": "1234", //телефон, строка, м.б. null
    "email": null, //почта, строка, м.б. null
    "owner_user_id": null, //идентификатор владельца, guid, м.б. null
    "default_transport_type": null, //транспорт, предпочитаемый пользователем, м.б. null
    "lo_bonus_scores": 104.47, //, м.б. null
    "period_wo_lo": 0,          //, м.б. null
    "olg_bonus_scores": 9773.82,    //, м.б. null
    "go_bonus_scores": 53263.39,    //, м.б. null
    "cashback_balance": 0,          //, м.б. null
    "fl_club_points": 306.97,       //, м.б. null
    "fl_club_points_burn": 0,       //, м.б. null
    "transports": [ 
        FLChat, 
        Telegram 
    ],               // доступные виды транспорта
    "segments": [
        "Потенциальные участники СП",
        "Faberlic-клуб"    
    ],     // названия сегментов, в которых состоит пользователь       
    "comment": "",  //комментарий 
    "location": {           //Местоположение, м.б. null
        "zip": "220015",
        "city": "Минск",
        "region": "Минская",
        "country": "Беларусь"
    },
    "number": 486363,       //номер в системер ПАРТНЁР, м.б. null
    "birthday": "1967-04-22",   //дата рождения, м.б. null
    "is_director": true,        //признак директора
    "last_order_date": "1967-04-22",    //дата последнего заказа, м.б. null
    "user_id": "18a4227e-44b1-e911-a2c0-9f888bb5fde6",  //идентификатор пользователя
    "full_name": "Мезенцев Алексей Леонидович",     //полное имя
    "avatar_upload_date": null,     //дата загрузки аватара, если аватара нет, то null
    "rank": "Золотой",      //ранк пользователя
    "online": "offline" | "online" | null, //одно из значений, может быть NULL
    "broadcast_prohibition": true | false, //запрет отправки широковещательных сообщений в структуру пользователя
    "has_childs": true | false,
    "is_me": true | false, //профиль запрашивающего пользователя или нет
    "parent_depth": целое | null, //расстояние между профилем и запрашиваемым, если профиль расположен выше по стволу дерева, чем запрашивающий (= запрашивающий входит в структуру пользователя этого профиля); null - если запрашивающий и профиль входят в разные структуры или is_me = true
    "child_depth": целое | null, //расстояние между профилем и запрашиваемым, если профиль входит в структуру запрашивающего (= запрашивающий расположен выше по дереву); null - если запрашивающий и профиль входят в разные структуры или is_me = true
}

3.1 Получение данных пользователя
3.1.1. Определённого пользователя с указанием его идентификатора
  GET users/9281A298-F04A-E911-B598-74D4352752DA
3.1.2 Собственного 
  GET profile

response: 
200 OK, в ответе тип данных UserInfo
404 NotFound + user_not_found - в случае если не найден пользователь с указанным идентификатором


3.2. Работа с аватаром
 В заголовке запроса в поле Content-Type должна быть строка, содержащая информацию о типе графического файла. Например, image/bmp или image/png или image/jpeg.

3.2.1 Отправка собственного/чужого аватара

POST profile/avatar
POST users/9281A298-F04A-E911-B598-74D4352752DA/avatar
request:
   В теле послания бинарный файл с изображением
response: 200 OK
404 NotFound + user_not_found - в случае если не найден пользователь с указанным идентификатором
415 UnsupportedMediaType   not_support  Файл данного типа не может быть аватаром или тип заявленного файла не совпадает с его реальным типом(по сигнатуре)
415 UnsupportedMediaType   max_size_limit  Превышен предельный размер загружаемого файла

3.2.2 Получение собственного/чужого аватара

GET profile/avatar
GET users/9281A298-F04A-E911-B598-74D4352752DA/avatar

response: 200 OK
В заголовке Content-Type тип данных
В теле ответа бинарный файл с изображением

404 NotFound + user_not_found - в случае если не найден пользователь с указанным идентификатором

3.2.3 Удаление собственного/чужого аватара

DELETE profile/avatar
DELETE users/9281A298-F04A-E911-B598-74D4352752DA/avatar

response: 200 OK

404 NotFound + user_not_found - в случае если не найден пользователь с указанным идентификатором

3.3. Получение контактов
3.3.1 Получение контактов собственного профиля
Выдача данных порционная, смещение и количество можно указать в параметрах запроса. Если смещение не указано, то выдача будет с начала. Если количество не указано, то количество будет ограничено определённым значением.

GET profile/contacts
GET profile/contacts?offset=Y
GET profile/contacts?count=X&offset=Y
response: 200 OK
{
  "users": [
    <UserInfoShort>,
    <UserInfoShort>,
    ...
  ],
  "members": [],  //копирует поле contacts, добавлено для совместимости и будет удалено
  "offset": 0,  //смещение из запроса
  "count": 100, //фактическое количество записей в текущем пакете
  "max_count": 100,  //максимальное количество записей для запроса
  "req_count": 100,  //запрошенное количество
  "total_count": 112  //общее количество записей, передаётся только для запроса со смещением 0
}

3.4. Получение прямых подчинённых
Выдача данных порционная, смещение и количество можно указать в параметрах запроса. Если смещение не указано, то выдача будет с начала. Если количество не указано, то количество будет ограничено определённым значением.

GET profile/childs?count=X&offset=Y
GET users/08c67188-b2e2-41c3-9b9e-058359648e05/childs?count=X&offset=Y
Версия 2:
GET profile/childs2?count=X&offset=Y
GET users/<user_id>/childs2?count=X&offset=Y

Версия 2 никогда не рассчитывает поле total_childs_count, для запроса количества пользователей в структуре пользователя нужно вызвать GET profile/childs/count и GET users/<user_id>/childs/count

response: 200 OK
{
    "user": <UserInfoShort>,
    "childs": [
        <UserInfoShort>,
        <UserInfoShort>
    ],
    "total_childs_count": xxx, //общее количество консультантов в структуре. Рассчитывается только для версии 1. Передаётся только когда запрашиваются подчинённые первого уровня своей структуры, в остальных случаях поле не передаётся.
    "offset": 0,  //смещение из запроса
    "count": 100, //фактическое количество записей в текущем пакете
    "max_count": 100,  //максимальное количество записей для запроса
    "req_count": 100,  //запрошенное количество
    "total_count": 112  //общее количество записей, передаётся только для запроса со смещением 0
}
В ответе элементы массива "childs" включают поле "has_childs".

3.5 GET profile/childs/count
    GET users/<user_id>/childs/count
Ответ: 200 OK
{
    "user_id": 'guid', //идентификатор пользователя, для которого запрошено количество
    "count": 254 //количество пользвателей в подструктуре пользователя
}
    
3.6 POST users/<id> - изменение профиля пользователя
    POST profile - изменение своего профиля 
{
    "full_name": <строка>,
    "phone": <строка>,
    "email": <строка>,
    "owner_user_id": <guid>,
    "default_transport_type": 'FLChat', //значение типа TransportKind
    "comment": <строка> // комментарий - только для чужого профиля,
    "broadcast_prohibition": true | false - запрет отправки широковещательных сообщений в структуру пользователя
    "personal_prohibition": true | false - запрет отправки широковещательных сообщений персонально данному пользователю
    "rank" : ""  //  Название должности. Список получается отдельной командой. Может быть null.
}

Передаются только те поля, которые требуется изменить.
Сейчас все могут изменить всех. В последствии будут наложены ограничения

response: 
200 OK, в ответе тип данных UserInfo
400 BadRequest + input_data_error - в случае если передаваемый параметр неверен
404 NotFound + user_not_found - в случае если не найден пользователь с указанным идентификатором


3.7 Создание пользователя в своём прямом подчинении
POST users
данные как в 3.5
Ответ: 200 OK, возвращается полный профиль пользователя UserInfo (поля IsMe, ParentDepth, ChildDepth, Comment, BroadcastProhibition, HasChilds не заполняются)

3.8 GET profile/parents
response: 200 OK
{
    "user": <UserInfoShort>,
    "parents": [
        <UserInfoShort>,
        <UserInfoShort>
    ]
}

3.9 GET|POST user/<id>/transport - тестовый запрос для редактировая транспорта пользователя
response 200 OK
{
    "id": "18bf1bb3-9960-4257-aaee-003c8541df3d",
    "transports": [
        {
            "kind": "Test",
            "enabled": true,
            "transport_id": "18bf1bb3-9960-4257-aaee-003c8541df3d"
        },
        {
            "kind": "FLChat",
            "enabled": true,
            "transport_id": null
        },
        {
            "kind": "WebChat",
            "enabled": true,
            "transport_id": null
        },
        {
            "kind": "Sms",
            "enabled": true,
            "transport_id": null
        }
    ]
}
При выполнении POST запроса на вход подаётся такая структура данных, как и в ответе (только без id). Можно включать/отключать транспорт (поле enabled) или создать канал FLChat, если такой отсутствует

3.10 GET users?search=xyz&count=X&offset=Y - поиск пользователей в своей структуре по вхождению строки для поиске в имя, телефон или почту, или полное совпадение с номером пользователя.
response: 200 OK
{
    "childs": [
        <UserInfoShort>,
        <UserInfoShort>
    ],
    "offset": 0,  //смещение из запроса
    "count": 100, //фактическое количество записей в текущем пакете
    "max_count": 100,  //максимальное количество записей для запроса
    "req_count": 100,  //запрошенное количество
    "total_count": 112  //общее количество записей, передаётся только для запроса со смещением 0
}
BadRequest + input_data_error: При отсутствии строки или длине строки меньше чем 3 символа

3.11 POST users/selection - подсчёт количества выделенных пользователей
В данных запроса передаётся тип Selection, такой же как при отправке Broadcast или Mailing сообщения
{
	"include_with_structure": //массив пользователей, выделенных вместе со своей структурой. Выделение может быть глубоким (deep), т.е. на всю глубину структуры, либо мелким (shallow), только один уровень вниз.
        [
            { "user_id": 'b7f43f8c-d71d-4fae-b791-0053cef5f0b9', "type": 'shallow' | 'deep' },
            ...
        ], 
    "exclude_with_structure": [ "c7f43f8c-d71d-4fae-b791-0053cef5f0b9", ....], //список пользователей, исключённых из выделения вместе со своей структурой
    "include": [ "d7f43f8c-d71d-4fae-b791-0053cef5f0b9", ....], //поимённый список пользователей, включённых в выделение
    "exclude": [ "e7f43f8c-d71d-4fae-b791-0053cef5f0b9", ....], //поимённый список пользователей, исключённых из выделения
    "segments": [ "guid", "seg-guid" ], //список идентификаторов сегментов (guid или guid с префиксом seg-, который возвращается в структуре пользователя)
}
response 200 OK
{
    "count": 12 //количество пользователей в выделении
}

3.12 POST profile/password - смена пароля
{
    "old_password": "123456", //строка
    "password": "123456" //строка
}
response 
200 OK Если присланый пароль совпадает с хранимым в БД, или же до этого пароль не был установлен и устанавливается в первый раз.
400  BadRequest + not_support Ошибка валидации. Если значение нового пароля null или пустая строка или длина пароля менее 6 символов.
401  BadRequest + wrong_old_password в случае, если переданный старый пароль не совпадает с тем, что в БД, если пароль был установлен, а в команде его нет.

3.13 POST profile/phonelist - загрузка файла с номерами телефонов, формирования "кастомного списка" пользователя.

request:
{
  "file_name": 'phones.txt', //Имя файла с номерами телефонов. В данный момент допустимы расширения *.txt, *.csv. В перспективе - *.xlsx
  "file_data": строковая переменная с содержимым файла, // Всё содержимое файла. Для *.xlsx - в base64 кодировке
}

responce:
200 OK и данные:
{
  "phones_count" : 123  //  Количество распознанных телефонных номеров из данных файла
  "users_count"  : 34   //  Количество человек из структуры пользователя, у которых номера телефонов входят в переданный список
}


400 BadRequest + input_data_error - что-то не так в переданных данных

В результате выполнения данной команды переданный файл обрабатывается, из него считываются и распознаются номера телефонов. Далее, по полученному списку находится группа пользователей из структуры передавшего, номера телефонов которых попали в полученный список. Данная группа записывается как "список для кастомной рассылки". В данный момент у каждого пользователя может быть не более одного такого списка. В качестве результата выполнения команды передаются два числа - количество распознанных номеров телефонов и количество найденных пользователей.
Ограничения на 16.04.2020. В качестве списка пока принимаются только текстовые файлы формата *.txt и *.csv. Проверка номеров телефонов пока что только на отсутствие в них недопустимых символов(кроме цифр и первого знака +)


4. Сегменты
    4.1 GET segment - список сегментов
        POST segment - список сегментов
    4.2 GET segment/<id>
    4.3 POST admin/segment/id

4.1 Список всех существующих сегментов
GET segment
response: 200 OK
{
    "segments": [
        {
            "id": "guid",           //идентификатор сегмента, guid
            "name": "segment_name", //название сегмента
            "count": 2              //количество пользователей в сегменте из структуры пользователя
        },
        ....
    ]
}

или POST segment - с возможностью запросить все сегменты
с данными
{
	"include_empty": false | true
}
 
4.2 Список всех пользователей из структуры запросившего, находящихся в данном сегменте
GET segment/<id>
response: 200 OK
{
    "id": "guid",           //идентификатор сегмента, guid
    "name": "segment_name", //название сегмента
    "count": 2,
    "members": [            //массив их коротких профилей пользователей
        <UserInfoShort>,
        <UserInfoShort>
    ]
}


5. Структура
    5.1 GET structure
    5.2 GET structure/"id"
    
5.1. Получение начальной структуры - корневой узел и его потомки
GET structure
response: 200 OK

{
    "owner": {
        "id": "nod-00000000-0000-0000-0000-000000000000",
        "name": "База потребителей",
        "count": 0
    },
    "users": [],
    "nodes": [
        {
            "id": "nod-232E8DBE-C46F-E911-B5C9-74D4352752DA",
            "name": "Участники МП",
            "count": 6
        },
        {
            "id": "nod-DCE05EF9-C46F-E911-B5C9-74D4352752DA",
            "name": "Потребители",
            "count": 6
        }
    ],
    "offset": 0,  //смещение из запроса
    "count": 0, //фактическое количество записей в текущем пакете
    "max_count": 100,  //максимальное количество записей для запроса
    "req_count": 100,  //запрошенное количество
    "total_count": 0  //общее количество записей, передаётся только для запроса со смещением 0
}

5.2. Получение структуры заданного узла 
GET structure/"id"
response: 200 OK

{
    "owner": {
        "id": "nod-DCE05EF9-C46F-E911-B5C9-74D4352752DA",
        "name": "Потребители",
        "count": 6
    },
    "users": [],
    "nodes": [
        {
            "id": "nod-B29CEF34-C86F-E911-B5C9-74D4352752DA",
            "name": "Новички",
            "count": 2
        },
        {
            "id": "nod-3D11E656-C86F-E911-B5C9-74D4352752DA",
            "name": "Активные",
            "count": 4
        }
    ],
    "offset": 0,  //смещение из запроса
    "count": 0, //фактическое количество записей в текущем пакете
    "max_count": 100,  //максимальное количество записей для запроса
    "req_count": 100,  //запрошенное количество
    "total_count": 0  //общее количество записей, передаётся только для запроса со смещением 0    
}

После подачи команды с именем сегмента получаем данные о пользователях, входящих в него.
GET structure/seg-E6BE6567-CF6E-E911-B5C8-74D4352752DA

{
    "owner": {
        "id": "seg-E6BE6567-CF6E-E911-B5C8-74D4352752DA",
        "name": "new segment205.05.2019 9:47:55",
        "count": 4
    },
    "users": [
        <UserInfoShort>,
        <UserInfoShort>,
        <UserInfoShort>,
        <UserInfoShort>
    ],
    "nodes": [],
    "offset": 0,  //смещение из запроса
    "count": 4, //фактическое количество записей в текущем пакете
    "max_count": 100,  //максимальное количество записей для запроса
    "req_count": 100,  //запрошенное количество
    "total_count": 4  //общее количество записей, передаётся только для запроса со смещением 0
}

6. WebChat. Все команды из этой секции выполняются со специальным токеном: 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCIsImlzcyI6IjIwMTktMDYtMjJUMTE6NDE6NTYuNTUzMzcyMyswODowMCIsImV4cCI6NjMwNzIwMDAwfQ.kxR4cp4DoEDTL4POsmBxxBeFGiDXHSVMcjKvpRVxoSc

    6.1 GET webchat/<code> - получение сообщения по коду
    6.2 POST webchat/<code> - ответ на сообщение по коду
    
6.1 GET webchat/<code>
Ответ: 200 OK
{
    "code": "PC4nBqXmAjh45hBFWV0s", //код сообщения из запроса
    "user": <UserInfo>, //полный профиль пользователя
    "from_user": <UserInfo>, //полный профиль отправителя сообщения
    "message": {
        "tm": "2019-06-22T03:59:08.217",
        "from": "c49f730f-4039-4ca1-a4b1-1a46f4ea9ba5",
        "transport": "FLChat",
        "incoming": true,
        "text": "Hello word!",
        "id": "0ec82915-a294-e911-82ef-1c1b0dafbcae"
    },
    "invite_buttons": [
        {
            "transport": "Telegram",
            "url": "https://telegram.me/TeleFLBot?start=PC4nBqXmAjh45hBFWV0s"
        }
    ]
}
В случае ошибки:
401 Unauthorized + access_denied
404 NotFound + not_found
404 NotFound + user_not_found

6.2 POST webchat/<code> - ответ на сообщение по коду
{
	"Text": "Мой ответ!" //текст ответа
}
Ответ: 200 OK
В случае ошибки:
401 Unauthorized + access_denied
404 NotFound + not_found
404 NotFound + user_not_found

6.3 GET webchat/litelink/<code> - получение ссылок для "лёгкой" ссылки
Ответ: 200 OK
{
    "code": "PC4nBqXmAjh45hBFWV0s", //код сообщения из запроса
    "invite_buttons": [
        {
            "transport": "Telegram",
            "url": "https://telegram.me/TeleFLBot?start=PC4nBqXmAjh45hBFWV0s"
        }
    ]
}

7.1. Отправка файла. 

POST file

request:
   В теле послания бинарный файл с изображением
В ответе приходит информация о записанном файле, его Id и прочие параметры. Поле названия файла не заполняется.
response: 200 OK

{
    "file_id": "2f94a9c6-ada3-e911-b60c-74d4352752da",
    "length":4934,
    "width":362,
    "height":412,
    "type": "image",
    "mime_type": "image/png",
    "file_name": null
}

415 UnsupportedMediaType   not_support  Тип заявленного файла не совпадает с его реальным типом(по сигнатуре)
415 UnsupportedMediaType   max_size_limit  Превышен предельный размер загружаемого файла

7.2. Получение файла. 

GET file/<Id> - получение данных файла (требуется авторизация)
GET image/<Id> - получение данных файла (не требуется авторизация, подходит для прямой ссылки. Пока доступны все файлы, потом будут только предпросмотр картинки)

response: 200 OK
В теле ответа бинарный файл с изображением

404 NotFound + not_found - в случае если не найден файл с указанным идентификатором


8. Администрирование

8.1  Поиск пользователей по всей базе(включая удалённых) по вхождению строки для поиске в имя, телефон или почту, или полное совпадение с номером пользователя. 
GET admin/users?search=xyz&count=X&offset=Y
response: 200 OK
{
    "users": [
        <UserInfoShort>,
        <UserInfoShort>
    ],
    "offset": 0,  //смещение из запроса
    "count": 100, //фактическое количество записей в текущем пакете
    "max_count": 100,  //максимальное количество записей для запроса
    "req_count": 100,  //запрошенное количество
    "total_count": 112  //общее количество записей, передаётся только для запроса со смещением 0
}
BadRequest + input_data_error: При отсутствии строки или длине строки меньше чем 3 символа

8.2 Получения списка пользователей в сегменте по всей базе с возможностью поиска, пагинации
GET  admin/segment/<id>?search=xyz&count=X&offset=Y 
Строка поиска, количество записей и смещение могут задаваться по отдельности или отсутствовать совсем. Если не задана строка поиска или длина строки меньше чем 3 символа считается, что поиск не задан и выдаётся список всех пользователей в сегменте.

response: 200 OK
{
 "segment": {
        "id": "350ba6f3-4a7d-4d33-8021-16bd89bb6c46",
        "name": "Имя сегмента",
        "count": 5,
        "descr": "Строка описания сегмента"
    },
    "members": [
        <UserInfoShort>,
        <UserInfoShort>
    ],
    "offset": 0,  //смещение из запроса
    "count": 5, //фактическое количество записей в текущем пакете
    "max_count": 100,  //максимальное количество записей для запроса
    "req_count": 100,  //запрошенное количество
    "total_count": 5  //общее количество записей, передаётся только для запроса со смещением 0
}


8.3 Администрирование сегмента - добавление и удаление пользователей
POST admin/segment/id
   {
     "add": [id1, id2, ....],  - список на добавление
     "remove": [id3, id4, ....],  - список на удаление
   }
response: 200 OK
Команда работает по очереди - сначала добавление, потом удаление. Проверок на принадлежность или НЕпринадлежность не делается, списки не сравниваются. Если один и тот же пользователь будет в обоих списках, то его точно удалят.

8.4 Удаление у заданного пользователя транспорт заданного типа
Позволяет удалить указанный тип транспорта у пользователя.

DELETE /admin/user/<id>?transport=xxx, например DELETE /admin/user/<id>?transport=Viber
response: 200 OK

В случае ошибки:
401 Unauthorized + access_denied
400 BadRequest + access_denied
404 NotFound + user_not_found
Ошибка выдаёся в случаях:
- Не найден пользователь с данным идентификатором
- Неверно указан тип транспорта
- Указан правильный тип транспорта, но он недопустим для удаления

8.5 GET admin/segment - список всех сегментов в БД (включая удалённые)
reponse
{
    "segments": [
        {
            "id": "4aaa3d63-6e75-e911-a2c0-9f888bb5fde6",
            "name": "9-23%",
            "descr": "9-23%",
            "is_deleted": true
        },
        {
            "id": "834d39b8-d0c4-e911-a2c0-9f888bb5fde6",
            "name": "12-14%",
            "descr": "12-14%"
        },
        ....
}

8.6 GET admin/user/<id>/segments - список всех сегментов пользователя
ответ аналогичен GET /FLChat/admin/segment

Жизненный путь сообщения:
1. отправка запроса POST message. Статус quequed (для внешних) или sent (для внутренних), сообщение записано в базу
2. если сообщение во внешний транспорт, то далее отдельный сервис их вычитывает из базы и отправляет, помечает статусом Sent. Дальнейшие статусы зависят от конкретного мессенджера, например, телеграм не отчитывается перед нами, что он доставил или сообщение было прочитано. 
3. Если сообщение внутреннее, то когда адресат сообщения получит его в ответ на команды events и history, то сообщению будет присвоен статус доставлено.
Статус доставлено проставляется, когда было запрошено сообщение через GET events или через history. Т.е. статусом доставлено управляет сервер. А статус прочитано устанавливается уже клиентом
4. И статус read устанавливается, когда получаем оповещение о том, что сообщение было прочитано.
Также есть статус Failed, актуален для внешних мессенджеров. Значит что-то пошло не так
7. Отправка и получение файлов. 
 В заголовке запроса в поле Content-Type должна быть строка, содержащая информацию о типе графического файла. Например, image/bmp или image/png или image/jpeg.


8.7 Информации по ограничениям на рассылку
GET admin/messagetype
Ответ 200 OK

{
    "message_type": 
     [
        {
            "limit_for_day": null,
            "limit_for_once": null,
            "type": "Personal"
        },
        {
            "limit_for_day": 5000,
            "limit_for_once": 1000,
            "type": "Broadcast"
        },
        {
            "limit_for_day": 5000,
            "limit_for_once": 1000,
            "type": "Mailing"
        }
     ]
}

Элементы массива:

type	Тип сообщений ('Personal', 'Broadcast', 'Mailing')
limit_for_day	Ограничение на количество сообщений в день. null - отсутствие ограничений
limit_for_once	Ограничение на количество сообщений за раз. null - отсутствие ограничений


8.8 Установка ограничений на рассылку
POST admin/messagetype/<type>
где <type> - один из видов рассылки: 'Broadcast', 'Mailing'.

с данными:

{
    "limit_for_day": 1000, //может быть null
    "limit_for_once": 1000 //может быть null
}

Ответ 200 OK

{
    "type": "Broadcast" | "Mailing",
    "limit_for_day": 1000, //может быть null
    "limit_for_once": 1000 //может быть null
}
Ошибочные ситуации:

400 BadRequest + not_support - внесение изменений для типа 'Personal' или лимит меньше или равен 0

404 NotFound + not_found - тип не найден

8.9  Получение списка званий

GET  admin/rank

response: 200 OK
{
  "ranks" : ["name1", "name2", ....],  - список наименований званий (должностей)
}

В случае отсутствия в БД списка званий возвращается пустой список.


9. 

9.1 Обработка запроса перехода по ссылке от ВК. 
Команда посылки сообщения о нажатии пользователем виджета подписки на страницу сообщества ВК. После обработки перехватчик получает 'user_id' пользователя, от которого получено, тип int. 
'deep_link' - ссылка, с которой пользователь приходит на страницу, тип string.
'id' - уникальный идентификатор посылаемого сообщения, тип GUID. Если нет возможности сформировать значение данной переменной, необходимо присвоить ему null, либо не передавать совсем.

POST /FLChat/sys/vk_subscribe
{
  "id" : "4aaa3d63-6e75-e911-a2c0-9f888bb5fde6"  // может быть null
  "user_id" : 1234678,  //идентификатор пользователя в ВК
  "deep_link" : "L81PdZRkWoXPmQzYXEHg"
}

response: 200 OK

В случае ошибки:
500 InternalServerError. Возможные причины - неверные значения для обязательных переменных
