Необходим текст программ, позволяющий организовать сервер и клиент на c# по обмену через grpc. На сервер отправляется структура вида
Guid Id;
string Name;
DateTime DateBirth;
float Money;

От срвера приходит ответ после некоторой обработки
Guid Id;
string State;
DateTime DateExpiry;
float Money;

Обмен должен быть постоянным и непрерывным.
Одновременно необходимо сделать параллельно работающую службу, которая будет отправлять на сервер структуру
Guid Id;
string State;
DateTime DateExpiry;
float Money;
получая от него в ответ

Guid Id;
bool Done;
Обмен также должен быть постоянным и непрерывным.


Для создания простого примера обмена сообщениями через gRPC на C#, вы можете использовать следующий код. Для примера я использую ASP.NET Core в качестве сервера и консольное приложение в качестве клиента.

### Сервер (ASP.NET Core gRPC):

1. Создайте новый проект ASP.NET Core gRPC:

bash
dotnet new grpc -n GrpcServer


2. Отредактируйте файл `GrpcServer/Protos/greeter.proto`:

protobuf
syntax = "proto3";

service Greeter {
  rpc SayHello (HelloRequest) returns (HelloReply);
}

message HelloRequest {
  string name = 1;
}

message HelloReply {
  string message = 1;
}


3. Внесите изменения в `GrpcServer/Services/GreeterService.cs`:

csharp
using Grpc.Core;
using Microsoft.Extensions.Logging;
using System.Threading.Tasks;

public class GreeterService : Greeter.GreeterBase
{
    private readonly ILogger<GreeterService> _logger;

    public GreeterService(ILogger<GreeterService> logger)
    {
        _logger = logger;
    }

    public override Task<HelloReply> SayHello(HelloRequest request, ServerCallContext context)
    {
        return Task.FromResult(new HelloReply
        {
            Message = $"Hello {request.Name}!"
        });
    }
}


4. Запустите сервер:

bash
cd GrpcServer
dotnet run


### Клиент (Консольное приложение):

1. Создайте новый проект консольного приложения:

bash
dotnet new console -n GrpcClient


2. Установите пакет Grpc.Net.Client:

bash
cd GrpcClient
dotnet add package Grpc.Net.Client


3. Отредактируйте файл `GrpcClient/Program.cs`:

csharp
using System;
using System.Threading.Tasks;
using Grpc.Net.Client;
using GrpcServer;

class Program
{
    static async Task Main(string[] args)
    {
        using var channel = GrpcChannel.ForAddress("https://localhost:5001");
        var client = new Greeter.GreeterClient(channel);

        while (true)
        {
            Console.Write("Enter your name: ");
            var name = Console.ReadLine();

            var reply = await client.SayHelloAsync(new HelloRequest { Name = name });
            Console.WriteLine($"Server replied: {reply.Message}\n");
        }
    }
}


4. Запустите клиент:

bash
cd GrpcClient
dotnet run


Это базовый пример. Для вашего случая с более сложными структурами, вы должны адаптировать код `HelloRequest`, `HelloReply`, `GreeterService` и `Program` в соответствии с вашими требованиями. Обратите внимание, что вы можете добавить логику для бесконечного обмена сообщениями в цикле в клиентском и серверном коде.